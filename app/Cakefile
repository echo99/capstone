# Rehab can be installed via npm using: 'npm install -g rehab' or 'npm install rehab'
fs = require 'fs'
{spawn, exec} = require 'child_process'
Rehab = require 'rehab'

APP_JS = '../public/app.js'
VENDOR_JS = '../public/vendor.js'

task 'build', 'Build coffee2js using Rehab', sbuild = ->
  console.log "Building project from src/*.coffee to #{APP_JS}"

  files = new Rehab().process './src'

  to_single_file = "--join #{APP_JS}"
  from_files = "--compile #{files.join ' '}"

  exec "coffee #{to_single_file} #{from_files}", (err, stdout, stderr) ->
    throw err if err

task 'vendcomp', 'Combine vendor scripts into one file', ->
  # exec 'echo "hi"'
  scripts = ''
  dir = '../vendor/scripts'
  files = fs.readdirSync dir
  for file in files
    contents = fs.readFileSync (dir+'/'+file), 'utf8'
    scripts += contents
    #name = file.replace /\..*/, '' # remove extension
    #templateJs += "window.#{name} = '#{contents}';"
  try
    fs.writeFile VENDOR_JS, scripts
  catch err
    console.log err
  # exec 'echo "hi2"'
  #exec "echo #{scripts} > ../public/vendor.js"

task 'watch', 'Watch all files in src and compile as needed', sbuild = ->
  console.log "Watching files src/*.coffee"
  # console.log "Note: This will only watch existing files"
  # console.log "      You will have to rerun the command if you add any files"

  #to_single_file = "--join ../public/app.js"
  
  # files = new Rehab().process './src'
  # from_files = "--compile #{files.join ' '}"
  # args = ['-cw', '--join', '../public/app.js']
  # Array::push.apply args, files

  cmd = 'coffee'
  if process.platform == 'win32'
    cmd = 'coffee.cmd'
  args = ['-wp', 'src']
  coffee = spawn cmd, args

  #coffee = spawn 'coffee', ['-cw', '--join', '../public/app.js', 'src']
  coffee.stdout.on 'data', (data) -> 
    # files = new Rehab().process './src'
    # from_files = "--compile #{files.join ' '}"
    # args = ['-cw', '--join', '../public/app.js', 'src']
    console.log "Recompiling files"
    invoke 'build'
  coffee.stderr.on 'data', (data) ->
    console.log data.toString().trim()
    #console.log data.toString().trim()

task 'integrate', 'Compile and combine all files', sbuild = ->
  invoke 'build'
  invoke 'vendcomp'

task 'minify', 'Minifies all public .js files (requires UglifyJS)', ->
  console.log 'Minifying app.js and vendor.js'
  missingUglify = (error) ->
    console.error(error.toString().trim())
    console.error('UglifyJS may not be installed correctly')
    console.error('Please install using "npm install -g uglify-js"')
    process.exit(error.code)
  exec "uglifyjs test.js -o #{APP_JS}", (err, stdout, stderr) ->
    if err
      if process.platform == 'win32'
        # Handle Windows errors
        if err.code == 1
          # 1 = "ERROR_INVALID_FUNCTION"
          missingUglify(err)
      else if err.code == 127
        # 127 = "illegal command"
        missingUglify(err)
      else
        throw err # Unknown error
  exec "uglifyjs #{VENDOR_JS} -o #{VENDOR_JS}", (err, stdout, stderr) ->
    if err
      throw err