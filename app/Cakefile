# Rehab can be installed via npm using: 'npm install -g rehab' or 'npm install rehab'
fs = require 'fs'
{spawn, exec} = require 'child_process'
Rehab = require 'rehab'

APP_JS = '../public/app.js'
VENDOR_JS = '../public/vendor.js'
SRC_DIR = 'src'

task 'build', 'Build coffee2js using Rehab', sbuild = ->
  console.log "Building project from #{SRC_DIR}/*.coffee to #{APP_JS}"

  # Try to compile all files individually first, to get a better
  # error message, then if it succeeds, compile them all to one file

  callback = (passed) ->
    if passed
      files = new Rehab().process './'+SRC_DIR

      to_single_file = "--join #{APP_JS}"
      from_files = "--compile #{files.join ' '}"  

      exec "coffee #{to_single_file} #{from_files}", (err, stdout, stderr) ->
        if err
          # Should probably figure out way to handle this error
          # However, if it got to this point, there should be no problems
          console.error err.toString().trim()
          #throw err

  checkSyntax(callback)

task 'vendcomp', 'Combine vendor scripts into one file', ->
  console.log "Combining vendor scripts to #{VENDOR_JS}"
  scripts = ''
  dir = '../vendor/scripts'
  files = fs.readdirSync dir
  for file in files
    contents = fs.readFileSync (dir+'/'+file), 'utf8'
    scripts += contents
    #name = file.replace /\..*/, '' # remove extension
    #templateJs += "window.#{name} = '#{contents}';"
  try
    fs.writeFile VENDOR_JS, scripts
  catch err
    console.log err
  # exec 'echo "hi2"'
  #exec "echo #{scripts} > ../public/vendor.js"

task 'watch', 'Watch all files in src and compile as needed', sbuild = ->
  console.log "Watching files #{SRC_DIR}/*.coffee"

  # Get total number of files
  files = new Rehab().process './src'
  filesToProcess = files.length

  cmd = 'coffee'
  if process.platform == 'win32'
    cmd = 'coffee.cmd'
  args = ['-wp', SRC_DIR]
  coffee = spawn cmd, args

  coffee.stdout.on 'data', (data) -> 
    # Only compile the last time iterating throught all the files
    if filesToProcess > 1
      filesToProcess--
      # console.log(filesToProcess + " files left")
    else
      console.log "Recompiling files"
      invoke 'build'

task 'integrate', 'Compile and combine all files', sbuild = ->
  invoke 'build'
  invoke 'vendcomp'

task 'minify', 'Minifies all public .js files (requires UglifyJS)', ->
  console.log 'Minifying app.js and vendor.js'

  missingUglify = (error) ->
    console.error(error.toString().trim())
    console.error('UglifyJS may not be installed correctly')
    console.error('Please install using "npm install -g uglify-js"')
    process.exit(error.code)

  exec "uglifyjs test.js -o #{APP_JS}", (err, stdout, stderr) ->
    if err
      if process.platform == 'win32'
        # Handle Windows errors
        if err.code == 1
          # 1 = "ERROR_INVALID_FUNCTION"
          missingUglify(err)
      else if err.code == 127
        # 127 = "illegal command"
        missingUglify(err)
      else
        throw err # Unknown error

  exec "uglifyjs #{VENDOR_JS} -o #{VENDOR_JS}", (err, stdout, stderr) ->
    if err
      throw err

checkSyntax = (callback) ->
  nulDir = if process.platform == 'win32' then 'nul' else '/dev/null'

  exec "coffee -p -c src > #{nulDir}", (err, stdout, stderr) ->
    if err
      console.error err.toString().trim()
      callback(false)
    else
      callback(true)

task 'check', 'Temporarily compiles coffee files to check syntax', ->
  passFunc = (passed) ->
    if passed
      console.log("No errors found")
  checkSyntax(passFunc)

# task 'lint', 'Run files through lint', ->
#   exec "coffee -l #{SRC_DIR}", (err, stdout, stderr) ->
#     if err
#       console.log err
#       throw err